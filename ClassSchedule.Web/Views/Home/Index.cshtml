@using System.Globalization
@using ClassSchedule.Web.Helpers
@using ClassSchedule.Web.Models.Schedule
@using WebGrease.Css.Extensions
@model ClassSchedule.Web.Models.Schedule.ScheduleViewModel
@{
    ViewBag.Title = "Расписание занятий";

    int numberOfDays = 6;
    int numberOfLessons = 6;
    int numberOfGroups = Model.GroupLessons.Count;

    int totalWidthOfColumns = 100;
    int widthOfInfoColumn = 3;
    string widthOfGroupColumn = Math.Round((totalWidthOfColumns - widthOfInfoColumn * 2f) / numberOfGroups, 2).ToString(CultureInfo.GetCultureInfo("en-US"));
}
@Styles.Render("~/Content/bootstrap-select")

<div class="schedule-container">
    @Html.Partial("_Navbar")

    <div class="week-panel text-center" data-week="@Model.WeekNumber">
        @(Model.WeekNumber%2 == 0 ? "Вторая" : "Первая") [@Model.WeekNumber] неделя (@Model.FirstDayOfWeek.ToString("dd.MM") - @Model.LastDayOfWeek.ToString("dd.MM"))
        @*<a href="#"><i class="fa fa-pencil"></i> Изменить</a>*@
    </div>

    <div class="group-panel">
        <div class="bordered-rb text-center" style="width: 3%; float: left">День</div>
        <div class="bordered-rb text-center" style="width: 3%; float: left">Пара</div>
        @foreach (var group in Model.GroupLessons)
        {
            <div class="bordered-rb text-center" data-group-id="@group.GroupId" style="width: @widthOfGroupColumn%; float: left">
                <span>@group.GroupName</span>
                @if (group.NumberOfStudents.HasValue && group.NumberOfStudents.Value != 0)
                {
                    <span class="students"><i class="fa fa-male"></i> @group.NumberOfStudents</span>
                }

                @*<span class="info"><i class="fa fa-info-circle"></i></span>*@
            </div>
        }
    </div>

    <div class="days-panel" style="width: 3%; float: left">
        @for (int i = 0; i < 6; i++)
        {
            <div class="bordered-rb day-cell text-center">
                <span>@ScheduleHelpers.DayOfWeek(i) <br><small>@Model.FirstDayOfWeek.AddDays(i).ToString("dd.MM")</small></span>
            </div>
            <div class="day-separator"></div>
        }
    </div>

    <div class="lessons-number-panel" style="width: 3%; float: left">
        @for (int i = 0; i < numberOfDays; i++)
        {
            for (int j = 0; j < numberOfLessons; j++)
            {
                <div class="bordered-rb cell text-center">
                    <span>@(j + 1)</span> <br>
                    <p>@ScheduleHelpers.TimeOfLesson(i, j)</p>
                </div>
            }

            <div class="day-separator"></div>
        }
    </div>

    @foreach (var group in Model.GroupLessons)
    {
        <div style="width: @widthOfGroupColumn%; float: left">
            @for (int dayNumber = 1; dayNumber < numberOfDays + 1; dayNumber++)
            {
                for (int classNumber = 1; classNumber < 7; classNumber++)
                {
                    <div class="bordered-rb cell lesson-cell noselect" data-group="@group.GroupId" data-day="@dayNumber" data-class-number="@classNumber"
                         data-class-date="@Model.FirstDayOfWeek.AddDays(dayNumber - 1).ToString("dd.MM.yyyy")">

                        <div class="flash" style="display: none"><span></span></div>

                        @{
                            var day = dayNumber;
                            var number = classNumber;
                            var lesson = group.Lessons.Where(x => x.DayNumber == day && x.ClassNumber == number);

                            @Html.Partial("_LessonCell", lesson)
                            @Html.Partial("_LessonActions")
                        }
                    </div>
                }

                <div class="day-separator"></div>
            }
        </div>
    }
</div>

@Html.Partial("_EditLesson")
@Html.Partial("_ActionModal")

@section Scripts {
    @Scripts.Render("~/bundles/underscore")
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/bundles/typeahead")
    @Scripts.Render("~/bundles/bootstrap-select")
    @Scripts.Render("~/bundles/edit-lesson")

    <script>
        $(function () {
            /* Показ модального окна редактирования занятия
            ------------------------------------------------------------*/
            $(".lesson-cell").click(function () {
                viewModel.selectLesson(this);
            });

            $(".lesson-cell").dblclick(function () {
                viewModel.editLesson();
            });

            //// Отключаем вертикальную прокрутку
            //$('#edit-lesson').on('shown.bs.modal', function () {
            //    $('html').addClass('not-scrollable');
            //});

            //// Включаем вертикальную прокрутку
            //$('#edit-lesson').on('hidden.bs.modal', function () {
            //    $('html').removeClass('not-scrollable');
            //});

            ko.validation.init({
                decorateInputElement: true,
                errorElementClass: 'error',
                errorClass: 'glyphicon glyphicon glyphicon-exclamation-sign form-control-feedback text-danger',
                grouping: {
                    deep: true,
                    live: true,
                    observable: true
                }
            });
            ko.applyBindings(viewModel);
        });

        var viewModel = new MainViewModel();

        function MainViewModel() {
            var self = this;

            self.SelectedLessonCell = ko.observable();
            self.CopiedLessonCell = ko.observable();

            self.EditLessonViewModel = ko.observable(new EditLessonViewModel());

            self.editLesson = function (/*lessonCell*/) {
                var lessonCell = self.SelectedLessonCell();

                var weekNumber = $('.week-panel').attr('data-week');
                var groupId = $(lessonCell).attr('data-group');
                var dayNumber = $(lessonCell).attr('data-day');
                var classNumber = $(lessonCell).attr('data-class-number');
                var classDate = $(lessonCell).attr('data-class-date');

                var parameters = {
                    weekNumber: weekNumber,
                    groupId: groupId,
                    dayNumber: dayNumber,
                    classNumber: classNumber
                };

                $.ajax({
                    type: "GET",
                    url: "/Home/EditLesson",
                    data: parameters,
                    success: function (data) {
                        self.EditLessonViewModel(new EditLessonViewModel(data));

                        var lessonDisciplines = self.EditLessonViewModel().Lessons();
                        if (lessonDisciplines.length === 0) {
                            self.EditLessonViewModel().addDiscipline();
                        }

                        // Показ модального окна
                        $('#edit-lesson').modal({
                            backdrop: 'static',
                            keyboard: false
                        });
                    },
                    error: function (xhr, status, error) {
                        var err = eval("(" + xhr.responseText + ")");
                        alert(err.Message);
                    }
                });
            };

            self.selectLesson = function (lessonCell) {
                self.SelectedLessonCell(lessonCell);

                var selectedCell = $('.lesson-cell.selected');
                if (!selectedCell.is(lessonCell)) {
                    selectedCell.removeClass('selected');
                    selectedCell.find('.actions').hide(150);

                    $(lessonCell).addClass('selected');
                    $(lessonCell).find('.actions').show(150);

                    if (!self.CopiedLessonCell()) {
                        $('.flash').hide(350);
                    }
                }
            };

            self.copyLesson = function () {
                $('.flash').hide(350);

                var selectedCell = self.SelectedLessonCell();
                self.CopiedLessonCell(selectedCell);

                self.cellMark.copy();
            };

            self.pasteLesson = function () {
                var modalContent = "Вы действительно хотите вставить скопированное занятие?";
                self.actionModal.content(modalContent);
                self.actionModal.setWarningStyle();

                // Показ модального подтверждения
                $('#action-modal').modal({
                    backdrop: 'static',
                    keyboard: false
                }).one('click', '#modal-confirm', function () {

                    var targetLessonCell = self.SelectedLessonCell();
                    var sourceLessonCell = self.CopiedLessonCell();

                    var weekNumber = $('.week-panel').attr('data-week');

                    var targetGroupId = $(targetLessonCell).attr('data-group');
                    var targetDayNumber = $(targetLessonCell).attr('data-day');
                    var targetClassNumber = $(targetLessonCell).attr('data-class-number');
                    // var targetClassDate = $(targetLessonCell).attr('data-class-date');

                    var sourceGroupId = $(sourceLessonCell).attr('data-group');
                    var sourceDayNumber = $(sourceLessonCell).attr('data-day');
                    var sourceClassNumber = $(sourceLessonCell).attr('data-class-number');

                    var postData = {
                        weekNumber: weekNumber,
                        targetGroupId: targetGroupId, targetDayNumber: targetDayNumber, targetClassNumber: targetClassNumber,
                        sourceGroupId: sourceGroupId, sourceDayNumber: sourceDayNumber, sourceClassNumber: sourceClassNumber
                    }

                    $.ajax({
                        type: "POST",
                        url: "/Home/CopyLesson",
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify(postData),
                        dataType: "html",
                        success: function (result) {
                            if (result) {
                                $(targetLessonCell).find('.lesson-cell-content').replaceWith(result);
                            }

                            self.cellMark.check();
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert(xhr.status);
                            alert(thrownError);
                        }
                    });

                    $('#action-modal').modal('hide');
                });               
            };

            self.removeLesson = function () {
                var modalContent = "Вы действительно хотите удалить занятие?";
                self.actionModal.content(modalContent);
                self.actionModal.setDangerStyle();

                // Показ модального подтверждения
                $('#action-modal').modal({
                    backdrop: 'static',
                    keyboard: false
                }).one('click', '#modal-confirm', function () {
                    var selectedCell = self.SelectedLessonCell();

                    var weekNumber = $('.week-panel').attr('data-week');
                    var groupId = $(selectedCell).attr('data-group');
                    var dayNumber = $(selectedCell).attr('data-day');
                    var classNumber = $(selectedCell).attr('data-class-number');

                    var postData = {
                        weekNumber: weekNumber, groupId: groupId,
                        dayNumber: dayNumber, classNumber: classNumber
                    }

                    $.ajax({
                        type: "POST",
                        url: "/Home/RemoveLesson",
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify(postData),
                        dataType: "html",
                        success: function (result) { 
                            $(selectedCell).find(".lesson-cell-part").html('');
                            self.cellMark.check();
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert(xhr.status);
                            alert(thrownError);
                        }
                    });
                });
            };

            self.cellMark = {
                check: function () {
                    var flash = $(self.SelectedLessonCell()).find(".flash");
                    flash.find('span').text('');
                    flash.removeClass('bcg-warning');
                    flash.addClass("bcg-success");
                    flash.find("span").addClass("fa fa-check");
                    flash.show(500);
                },
                copy: function () {
                    var flash = $(self.SelectedLessonCell()).find(".flash");
                    flash.find('span').text('К');
                    flash.find('span').removeClass('fa fa-check');
                    flash.addClass('bcg-warning');
                    flash.show(350);
                }
            }

            self.actionModal = {
                lastStyle: null,
                clear: function () {
                    if (this.lastStyle) {
                        $('#action-modal .custom-modal-header').removeClass(this.lastStyle);
                        $('#modal-confirm').removeClass('btn-' + this.lastStyle);
                    }                  
                },

                setSucessStyle: function () {
                    this.clear();
                    $('#action-modal .custom-modal-header').addClass('success');
                    $('#modal-confirm').addClass('btn-success');
                    this.lastStyle = 'success';
                },

                setWarningStyle: function () {
                    this.clear();
                    $('#action-modal .custom-modal-header').addClass('warning');
                    $('#modal-confirm').addClass('btn-warning');
                    this.lastStyle = 'warning';
                },

                setDangerStyle: function () {
                    this.clear();
                    $('#action-modal .custom-modal-header').addClass('danger');
                    $('#modal-confirm').addClass('btn-danger');
                    this.lastStyle = 'danger';
                },

                content: function(modalContent) {
                    $('#action-modal .modal-body').html(modalContent);
                }
            }
        };

        ko.bindingHandlers.tooltip = {
            init: function (element, valueAccessor) {
                var local = ko.utils.unwrapObservable(valueAccessor()),
                    options = {};

                ko.utils.extend(options, ko.bindingHandlers.tooltip.options);
                ko.utils.extend(options, local);

                $(element).tooltip(options);

                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    $(element).tooltip("destroy");
                });
            },
            options: {
                placement: "bottom",
                trigger: "hover"
            }
        };
    </script>
}
