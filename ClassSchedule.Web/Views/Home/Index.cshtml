@using System.Globalization
@using ClassSchedule.Web.Helpers
@using ClassSchedule.Web.Models.Schedule
@using WebGrease.Css.Extensions
@model ClassSchedule.Web.Models.Schedule.ScheduleViewModel
@{
    ViewBag.Title = "Расписание занятий";

    int numberOfDays = 6;
    int numberOfLessons = 6;
    int numberOfGroups = Model.GroupLessons.Count;

    int totalWidthOfColumns = 100;
    int widthOfInfoColumn = 3;
    string widthOfGroupColumn = Math.Round((totalWidthOfColumns - widthOfInfoColumn * 2f) / numberOfGroups, 2).ToString(CultureInfo.GetCultureInfo("en-US"));
}

<div class="schedule-container">
    @Html.Partial("_Navbar")

    <div class="week-panel text-center" data-week="@Model.WeekNumber">
        @(Model.WeekNumber % 2 == 0 ? "Вторая" : "Первая") [@Model.WeekNumber] неделя (@Model.FirstDayOfWeek.ToString("dd.MM") - @Model.LastDayOfWeek.ToString("dd.MM"))
    </div>

    <div class="group-panel">
        <div class="bordered-rb text-center" style="width: 3%; float: left">День</div>
        <div class="bordered-rb text-center" style="width: 3%; float: left">Пара</div>
        @foreach (var group in Model.GroupLessons)
        {
            <div class="bordered-rb text-center" data-group-id="@group.GroupId" style="width: @widthOfGroupColumn%; float: left">
                @group.GroupName
            </div>
        }
    </div>

    <div class="days-panel" style="width: 3%; float: left">
        @for (int i = 0; i < 6; i++)
        {
            <div class="bordered-rb text-center" style="height: 300px;">
                <span>@ScheduleHelpers.DayOfWeek(i) <br><small>@Model.FirstDayOfWeek.AddDays(i).ToString("dd.MM")</small></span>
            </div>
            <div class="day-separator"></div>
        }
    </div>

    <div class="lessons-number-panel" style="width: 3%; float: left">
        @for (int i = 0; i < numberOfDays; i++)
        {
            for (int j = 0; j < numberOfLessons; j++)
            {
                <div class="bordered-rb text-center" style="height: 50px;">
                    <span>@(j + 1)</span> <br>
                    <p>@ScheduleHelpers.TimeOfLesson(i, j)</p>
                </div>
            }

            <div class="day-separator"></div>
        }
    </div>

    @foreach (var group in Model.GroupLessons)
    {
        <div style="width: @widthOfGroupColumn%; float: left">
            @for (int dayNumber = 1; dayNumber < numberOfDays + 1; dayNumber++)
            {
                for (int classNumber = 1; classNumber < 7; classNumber++)
                {
                    <div class="bordered-rb lesson-cell noselect" data-group="@group.GroupId" data-day="@dayNumber" data-class-number="@classNumber"
                         data-class-date="@Model.FirstDayOfWeek.AddDays(dayNumber - 1).ToString("dd.MM.yyyy")">
                        @{
                            var day = dayNumber;
                            var number = classNumber;
                            var lesson = group.Lessons.Where(x => x.DayNumber == day && x.ClassNumber == number);

                            @Html.Partial("_LessonCell", lesson)
                        }
                    </div>                   
                }

                <div class="day-separator"></div>
            }
        </div>
    }
</div>

@Html.Partial("_EditLesson")

@section Scripts {
    @Scripts.Render("~/bundles/underscore")
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/bundles/typeahead")
    @Scripts.Render("~/bundles/edit-lesson")

    <script>
        $(function() {
            /* Показ модального окна редактирования занятия
            ------------------------------------------------------------*/
            $(".lesson-cell").click(function() {
                viewModel.SelectedLessonCell = this;

                var selectedCell = $('.lesson-cell.selected');            
                if (!selectedCell.is(this)) {
                    selectedCell.removeClass('selected');
                    selectedCell.find('.actions').hide(150);

                    $(this).addClass('selected');
                    $(this).find('.actions').show(150);
                }

                $('.flash').hide(350);
            });

            $(".lesson-cell").dblclick(function() {
                viewModel.editLesson(this);
            });

            //$.contextMenu({
            //    selector: '.lesson-cell',
            //    callback: function (key, options) {
            //        var m = "clicked: " + key;
            //        window.console && console.log(m) || alert(m);
            //    },
            //    items: {
            //        "edit": { name: "Edit", icon: "edit" },
            //        "cut": { name: "Cut", icon: "cut" },
            //        copy: { name: "Copy", icon: "copy" },
            //        "paste": { name: "Paste", icon: "paste" },
            //        "delete": { name: "Delete", icon: "delete" },
            //        "sep1": "---------",
            //        "quit": {
            //            name: "Quit", icon: function () {
            //                return 'context-menu-icon context-menu-icon-quit';
            //            }
            //        }
            //    }
            //});
            $('[data-toggle="tooltip"]').tooltip();

            ko.applyBindings(viewModel);
        });

        var viewModel = new MainViewModel();

        function MainViewModel() {
            var self = this;

            self.SelectedLessonCell = null;
            self.EditLessonViewModel = ko.observable(new EditLessonViewModel());

            self.editLesson = function(lessonCell) {
                self.SelectedLessonCell = lessonCell;
                var weekNumber = $('.week-panel').attr('data-week');
                var groupId = $(lessonCell).attr('data-group');
                var dayNumber = $(lessonCell).attr('data-day');
                var classNumber = $(lessonCell).attr('data-class-number');
                var classDate = $(lessonCell).attr('data-class-date');

                var parameters = {
                    weekNumber: weekNumber,
                    groupId: groupId,
                    dayNumber: dayNumber,
                    classNumber: classNumber
                };

                $.ajax({
                    type: "GET",
                    url: "/Home/EditLesson",
                    data: parameters,
                    success: function(data) {
                        self.EditLessonViewModel(new EditLessonViewModel(data));

                        var lessonDisciplines = self.EditLessonViewModel().Lessons();
                        if (lessonDisciplines.length === 0) {
                            self.EditLessonViewModel().addDiscipline();
                        }

                        $('#edit-lesson').modal({
                            backdrop: 'static',
                            keyboard: false
                        });
                    },
                    error: function(xhr, status, error) {
                        var err = eval("(" + xhr.responseText + ")");
                        alert(err.Message);
                    }
                });
            };
        };
    </script>
}
