@using System.Globalization
@using ClassSchedule.Web.Helpers
@model ClassSchedule.Business.Models.Schedule.ShowScheduleViewModel
@{
    ViewBag.Title = "Расписание занятий";

    int numberOfDays = 6;
    int numberOfLessons = 6;
    int numberOfGroups = Model.NumberOfGroups;
    var groupLessons = Model.Schedule
        .GroupBy(x => new { x.GroupId, x.GroupName })
        .Select(x => new
        {
            GroupId = x.Key.GroupId,
            GroupName = x.Key.GroupName,
            Schedule = x.ToList()
        })
        .ToList();

    int totalWidthOfColumns = 100;
    int widthOfInfoColumn = 3;
    string widthOfGroupColumn = Math.Round((totalWidthOfColumns - widthOfInfoColumn * 2f) / numberOfGroups, 3).ToString(CultureInfo.GetCultureInfo("en-US"));
}

@Styles.Render("~/Content/bootstrap-select")
@Styles.Render("~/Content/notifications")

<div class="schedule-container">
    @Html.Partial("_Navbar")

    <div class="week-panel text-center" data-week="@Model.WeekNumber">
        <div class="number">@(Model.WeekNumber % 2 == 0 ? "Вторая" : "Первая") [@Model.WeekNumber] неделя (@Model.FirstDayOfWeek.ToString("dd.MM") - @Model.LastDayOfWeek.ToString("dd.MM"))</div>
        <div class="change"><a href="#" data-bind="click: changeWeek, tooltip: { title: 'Изменить редактируемую неделю', trigger: 'hover' }"><i class="fa fa-pencil"></i> Изменить</a></div>
    </div>

    <div class="group-panel">
        <div class="bordered-rb text-center" style="width: 3%; float: left">День</div>
        <div class="bordered-rb text-center" style="width: 3%; float: left">Пара</div>
        @foreach (var group in groupLessons)
        {
            <div class="group bordered-rb text-center" data-group-id="@group.GroupId" style="width: @widthOfGroupColumn%; float: left">
                <a href="#" class="group-info" target="_blank" data-bind="tooltip: { title: 'Информация о группе', trigger: 'hover' }">
                    <span>@group.GroupName</span>
                </a>
            </div>
        }
    </div>

    <div class="days-panel" style="width: 3%; float: left">
        @for (int i = 0; i < numberOfDays; i++)
        {
            <div class="bordered-rb day-cell text-center">
                <span>@ScheduleHelpers.DayOfWeek(i) <br><small>@Model.FirstDayOfWeek.AddDays(i).ToString("dd.MM")</small></span>
            </div>
            <div class="day-separator"></div>
        }
    </div>

    <div class="lessons-number-panel" style="width: 3%; float: left">
        @for (int i = 0; i < numberOfDays; i++)
        {
            for (int j = 0; j < numberOfLessons; j++)
            {
                <div class="bordered-rb cell text-center">
                    <span>@(j + 1)</span> <br>
                    <p>@ScheduleHelpers.TimeOfLesson(i, j)</p>
                </div>
            }

            <div class="day-separator"></div>
        }
    </div>

    @foreach (var group in groupLessons)
    {
        <div style="width: @widthOfGroupColumn%; float: left">
            @for (int dayNumber = 1; dayNumber < numberOfDays + 1; dayNumber++)
            {
                for (int classNumber = 1; classNumber < 7; classNumber++)
                {
                    <div class="bordered-rb cell lesson-cell noselect" data-group="@group.GroupId" data-day="@dayNumber" data-class-number="@classNumber"
                         data-class-date="@Model.FirstDayOfWeek.AddDays(dayNumber - 1).ToString("dd.MM.yyyy")">

                        <div class="flash" style="display: none"><span></span></div>

                        @{
                            var day = dayNumber;
                            var number = classNumber;
                            var schedule = group.Schedule.SingleOrDefault(x => x.DayNumber == day && x.ClassNumber == number);
                            if (schedule != null)
                            {
                                @Html.Partial("_LessonCell", schedule.Lessons)
                            }
                            else
                            {
                                <div class="lesson-cell-content"></div>
                            }


                            @Html.Partial("_LessonActions")
                        }
                    </div>
                }

                <div class="day-separator"></div>
            }
        </div>
    }
</div>

@Html.Partial("_EditLesson")
@Html.Partial("_ActionModal")
@Html.Partial("_ChangeWeek")

@section Scripts {
    @Scripts.Render("~/bundles/underscore")
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/bundles/typeahead")
    @Scripts.Render("~/bundles/bootstrap-select")
    @Scripts.Render("~/bundles/schedule")
    @Scripts.Render("~/bundles/highcharts")
    @Scripts.Render("~/bundles/noty")

    <script>
        $(function () {
            /* Показ модального окна редактирования занятия
            ------------------------------------------------------------*/
            $(".lesson-cell").click(function () {
                viewModel.selectLesson(this);
            });

            $(".lesson-cell").dblclick(function () {
                viewModel.editLesson();
            });

            //// Отключаем вертикальную прокрутку
            //$('#edit-lesson').on('shown.bs.modal', function () {
            //    $('html').addClass('not-scrollable');
            //});

            //// Включаем вертикальную прокрутку
            //$('#edit-lesson').on('hidden.bs.modal', function () {
            //    $('html').removeClass('not-scrollable');
            //});

            // Скрытие поповеров при клике вне него
            $('body').on('click', function (e) {
                $('[data-toggle="popover"]').each(function () {
                    //the 'is' for buttons that trigger popups
                    //the 'has' for icons within a button that triggers a popup
                    if (!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0) {
                        $(this).popover('hide');
                    }
                });
            });

            // Показ расписания преподавателя на день
            $('body').on('click', 'a.teacher', function (event) {
                var element = $(this);

                element.popover(
                {
                    html: true,
                    container: 'body',
                    title: 'Расписание преподавателя',
                    trigger: 'manual'
                }); //.popover('show');

                var dayNumber = element.closest('.lesson-cell').attr('data-day');
                var chairJobId = element.attr('data-chair-job');
                $.get('/Teacher/Schedule?chairJobId=' + chairJobId + '&dayNumber=' + dayNumber, function (result) {
                    element.attr('data-content', result);
                    element.popover('show');
                });

                //element.on('click', function() {
                //    $(this).popover('toggle');
                //});

                event.preventDefault();
            });

            // Валидация модального окна редактирования
            ko.validation.init({
                decorateInputElement: true,
                errorElementClass: 'error',
                errorClass: 'glyphicon glyphicon glyphicon-exclamation-sign form-control-feedback text-danger',
                grouping: {
                    deep: true,
                    live: true,
                    observable: true
                }
            });
            ko.applyBindings(viewModel);
        });

        var viewModel = new MainViewModel();

        function MainViewModel() {
            var self = this;

            self.SelectedLessonCell = ko.observable();
            self.CopiedLessonCell = ko.observable();

            self.ChangeWeekViewModel = ko.observable(new ChangeWeekViewModel());
            self.EditLessonViewModel = ko.observable(new EditLessonViewModel());
            self.CopyScheduleViewModel = ko.observable(new CopyScheduleViewModel());

            self.editLesson = function ( /*lessonCell*/) {
                var lessonCell = self.SelectedLessonCell();

                var weekNumber = $('.week-panel').attr('data-week');
                var groupId = $(lessonCell).attr('data-group');
                var dayNumber = $(lessonCell).attr('data-day');
                var classNumber = $(lessonCell).attr('data-class-number');
                var classDate = $(lessonCell).attr('data-class-date');

                var parameters = {
                    weekNumber: weekNumber,
                    groupId: groupId,
                    dayNumber: dayNumber,
                    classNumber: classNumber
                };

                $.ajax({
                    type: "GET",
                    url: "/Home/EditLesson",
                    data: parameters,
                    success: function (data) {
                        self.EditLessonViewModel(new EditLessonViewModel(data));

                        var lessonDisciplines = self.EditLessonViewModel().Lessons();
                        if (lessonDisciplines.length === 0) {
                            self.EditLessonViewModel().addDiscipline();
                        }

                        // Показ модального окна
                        $('#edit-lesson').modal({
                            backdrop: 'static',
                            keyboard: false
                        });
                    },
                    error: function (xhr, status, error) {
                        var message = 'Произошла ошибка при попытке редактирования занятия';
                        console.log(message);
                        var noty = new Noty(notyOptions);
                        noty.options.type = 'error';
                        noty.options.text = message;
                        noty.show();
                    }
                });
            };

            self.selectLesson = function (lessonCell) {
                self.SelectedLessonCell(lessonCell);

                var selectedCell = $('.lesson-cell.selected');
                if (!selectedCell.is(lessonCell)) {
                    selectedCell.removeClass('selected');
                    selectedCell.find('.actions').hide(150);

                    $(lessonCell).addClass('selected');
                    $(lessonCell).find('.actions').show(150);

                    $('.flash.check').hide(350);
                }
            };

            self.copyLesson = function () {
                $('.flash.copy').hide(350);
                $('.flash.copy').removeClass('copy');

                var selectedCell = self.SelectedLessonCell();
                self.CopiedLessonCell(selectedCell);

                self.cellMark.copy();
            };

            self.pasteLesson = function () {
                var modalContent = "<p>Вы действительно хотите вставить скопированное занятие?</p>";
                self.actionModal.content(modalContent);
                self.actionModal.setWarningStyle();

                // Показ модального подтверждения
                $('#action-modal').modal({
                    backdrop: 'static',
                    keyboard: false
                }).one('click', '#modal-confirm', function () {

                    var targetLessonCell = self.SelectedLessonCell();
                    var sourceLessonCell = self.CopiedLessonCell();

                    var weekNumber = $('.week-panel').attr('data-week');

                    var targetGroupId = $(targetLessonCell).attr('data-group');
                    var targetDayNumber = $(targetLessonCell).attr('data-day');
                    var targetClassNumber = $(targetLessonCell).attr('data-class-number');
                    // var targetClassDate = $(targetLessonCell).attr('data-class-date');

                    var sourceGroupId = $(sourceLessonCell).attr('data-group');
                    var sourceDayNumber = $(sourceLessonCell).attr('data-day');
                    var sourceClassNumber = $(sourceLessonCell).attr('data-class-number');

                    var postData = {
                        weekNumber: weekNumber,
                        targetGroupId: targetGroupId,
                        targetDayNumber: targetDayNumber,
                        targetClassNumber: targetClassNumber,
                        sourceGroupId: sourceGroupId,
                        sourceDayNumber: sourceDayNumber,
                        sourceClassNumber: sourceClassNumber
                    }

                    $.ajax({
                        type: "POST",
                        url: "/Home/CopyLesson",
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify(postData),
                        dataType: "html",
                        success: function (result) {
                            if (result) {
                                self.refreshLesson(sourceLessonCell, targetLessonCell);
                                $(targetLessonCell).find('.lesson-cell-content').replaceWith(result);
                            }

                            self.cellMark.check();

                            var message = 'Занятие успешно копировано';
                            console.log(message);
                            var noty = new Noty(notyOptions);
                            noty.options.type = 'success';
                            noty.options.text = message;
                            noty.show();
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            var message = 'Произошла ошибка при копировании занятия';
                            if (xhr.responseText) {
                                message = xhr.responseText.replace('"', '').replace('"', '');
                                console.log(xhr.responseText);
                            } 

                            console.log(message);
                            var noty = new Noty(notyOptions);
                            noty.options.type = 'error';
                            noty.options.text = message;
                            noty.show();
                        }
                    });

                    $('#action-modal').modal('hide');
                });
            };

            self.removeLesson = function () {
                var modalContent = "Вы действительно хотите удалить занятие?";
                self.actionModal.content(modalContent);
                self.actionModal.setDangerStyle();

                // Показ модального подтверждения
                $('#action-modal').modal({
                    backdrop: 'static',
                    keyboard: false
                }).one('click', '#modal-confirm', function () {
                    var selectedCell = self.SelectedLessonCell();

                    var weekNumber = $('.week-panel').attr('data-week');
                    var groupId = $(selectedCell).attr('data-group');
                    var dayNumber = $(selectedCell).attr('data-day');
                    var classNumber = $(selectedCell).attr('data-class-number');

                    var postData = {
                        weekNumber: weekNumber,
                        groupId: groupId,
                        dayNumber: dayNumber,
                        classNumber: classNumber
                    }

                    $.ajax({
                        type: "POST",
                        url: "/Home/RemoveLesson",
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify(postData),
                        dataType: "html",
                        success: function (result) {
                            // Обновление зависимых ячеек должно происходить раньше отчистки
                            self.refreshLesson();

                            $(selectedCell).find(".lesson-cell-part").html('');
                            self.cellMark.check();

                            var message = 'Занятие успешно удалено';
                            console.log(message);
                            var noty = new Noty(notyOptions);
                            noty.options.type = 'success';
                            noty.options.text = message;
                            noty.show();
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            var message = 'При удалении занятия произошла ошибка';
                            console.log(message);
                            var noty = new Noty(notyOptions);
                            noty.options.type = 'error';
                            noty.options.text = message;
                            noty.show();
                        }
                    });

                    $('#action-modal').modal('hide');
                });

            };

            self.refreshLesson = function (sourceLessonCell, targetLessonCell) {
                var selectedCell = sourceLessonCell || self.SelectedLessonCell();

                var groupId = $(selectedCell).attr('data-group');
                var dayNumber = $(selectedCell).attr('data-day');
                var classNumber = $(selectedCell).attr('data-class-number');

                var plannedChairJobIds = $(selectedCell).find('.teacher').map(function () {
                    return $(this).attr('data-chair-job');
                }).get();

                // Целевая ячейка используется для обновления после копирования
                if (targetLessonCell) {

                    // Если в исходной ячейке не пусто, то берем группу, день и номер занятия из целевой ячейки
                    // Если в исходной ячейке пусто, берем идентификаторы преподавателей из целевой ячейки
                    if (plannedChairJobIds.length) {

                        groupId = $(targetLessonCell).attr('data-group');
                        dayNumber = $(targetLessonCell).attr('data-day');
                        classNumber = $(targetLessonCell).attr('data-class-number');

                    } else {

                        plannedChairJobIds = $(targetLessonCell).find('.teacher').map(function () {
                            return $(this).attr('data-chair-job');
                        }).get();
                    }
                }

                var postData = {
                    groupId: groupId,
                    plannedChairJobIds: plannedChairJobIds,
                    dayNumber: dayNumber,
                    classNumber: classNumber
                }

                $.ajax({
                    type: "POST",
                    url: "/Home/RefreshLesson",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify(postData),
                    dataType: "html",
                    success: function (data) {
                        if (!data) return;

                        var refreshedCells = JSON.parse(data);

                        $.each(refreshedCells, function (index, cell) {
                            var cellSelector = ".lesson-cell[data-group='" + cell.GroupId + "'][data-day='"
                                + cell.DayNumber + "'][data-class-number='" + cell.ClassNumber + "']";

                            self.cellMark.refresh(cellSelector);
                            $(cellSelector).find('.lesson-cell-content').replaceWith(cell.Content);
                        });
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert(xhr.status);
                        alert(thrownError);
                    }
                });
            };

            self.cellMark = {
                getFlash: function (lessonCell) {
                    var selectedCell = lessonCell || self.SelectedLessonCell();
                    return $(selectedCell).find(".flash");
                },
                clear: function (lessonCell) {
                    var flash = this.getFlash(lessonCell);
                    flash.removeClass('check');
                    flash.removeClass('copy');
                    flash.removeClass('refresh');

                    flash.removeClass('bcg-warning');
                    flash.removeClass('bcg-success');
                    flash.removeClass('bcg-info');

                    var flashContent = flash.find("span");
                    flashContent.html('');
                    flashContent.text('');
                    flashContent.removeClass('fa fa-check');
                },
                check: function (lessonCell) {
                    this.clear(lessonCell);

                    var flash = this.getFlash(lessonCell);
                    flash.addClass("check");
                    flash.addClass("bcg-success");

                    var flashContent = flash.find("span");
                    flashContent.addClass("fa fa-check");

                    flash.show(350);
                },
                copy: function (lessonCell) {
                    this.clear(lessonCell);

                    var flash = this.getFlash(lessonCell);
                    flash.addClass("copy");
                    flash.addClass('bcg-warning');

                    var flashContent = flash.find("span");
                    flashContent.text('К');

                    flash.show(350);
                },
                refresh: function (lessonCell) {
                    var flash = this.getFlash(lessonCell);
                    var hasCopy = flash.hasClass('copy');

                    this.clear(lessonCell);

                    flash.addClass("refresh");
                    flash.addClass('bcg-info');

                    var flashContent = flash.find("span");
                    var spin = "<i class='fa fa-refresh fa-spin fa-fw margin-bottom'></i>" +
                        "<span class='sr-only'>Loading...</span>";
                    flashContent.html(spin);

                    flash.show(350).delay(1000).hide(350, function () {
                        if (hasCopy) {
                            self.cellMark.copy(lessonCell);
                        }
                    });

                    return flash;
                }
            }

            self.actionModal = {
                lastStyle: null,
                clear: function () {
                    if (this.lastStyle) {
                        $('#action-modal .custom-modal-header').removeClass(this.lastStyle);
                        $('#action-modal #modal-confirm').removeClass('btn-' + this.lastStyle);
                    }
                },

                setSucessStyle: function () {
                    this.clear();
                    $('#action-modal .custom-modal-header').addClass('success');
                    $('#action-modal #modal-confirm').addClass('btn-success');
                    this.lastStyle = 'success';
                },

                setWarningStyle: function () {
                    this.clear();
                    $('#action-modal .custom-modal-header').addClass('warning');
                    $('#action-modal #modal-confirm').addClass('btn-warning');
                    this.lastStyle = 'warning';
                },

                setDangerStyle: function () {
                    this.clear();
                    $('#action-modal .custom-modal-header').addClass('danger');
                    $('#action-modal #modal-confirm').addClass('btn-danger');
                    this.lastStyle = 'danger';
                },

                content: function (modalContent) {
                    $('#action-modal .modal-body').html(modalContent);
                }
            }

            self.changeWeek = function () {
                $.post('/Home/EditableWeeks', {}, function (data) {
                    self.ChangeWeekViewModel(new ChangeWeekViewModel(data));

                    $('#change-week').modal({
                        backdrop: 'static',
                        keyboard: false
                    });

                    //$('#change-week').on('click', '#modal-confirm', function () {
                    //    $.post('/Home/ChangeWeek',{ weekNumber: self.ChangeWeekViewModel().SelectedWeek() }, function () { });

                    //    $('#change-week').modal('hide');
                    //});

                    //$('#change-week').on('click', '#modal-cancel', function () {
                    //    $('#change-week').modal('hide');
                    //    $('#change-week').unbind('click');
                    //});
                });
            }

            self.copySchedule = function () {
                $.get('/Home/CopySchedule', {}, function (data) {

                    self.CopyScheduleViewModel(new CopyScheduleViewModel(data));

                    $('#copy-schedule').modal({
                        backdrop: 'static',
                        keyboard: false
                    });

                    $('#copy-schedule').on('click', '#modal-confirm', function () {
                        self.CopyScheduleViewModel().submit(function () {
                            $('#copy-schedule').modal('hide');
                        });
                                                
                        $('#copy-schedule').unbind('click');
                    });

                    $('#copy-schedule').on('click', '#modal-cancel', function () {
                        $('#copy-schedule').modal('hide');
                        $('#copy-schedule').unbind('click');
                    });
                });
            }
        };
    </script>
}
