@*@model ClassSchedule.Web.Models.SelectFlow.SelectFlowViewModel*@
@{
    ViewBag.Title = "Выбор потока";
}

@Styles.Render("~/Content/checkbox-x")
@Styles.Render("~/Content/bootstrap-select")

<div class="navbar navbar-inverse navbar-fixed-top">
    <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse"></button>
        <a class="navbar-brand filter" href="@Url.Action("Index", "Home")"></a>
    </div>
    <div class="navbar-collapse collapse">
        <ul class="nav navbar-nav">
            <li>
                <a href="@Url.Action("Index", "Home")">
                    <i class="fa fa-arrow-circle-left fa-32px"></i><br>
                    <span class="nav-icon-text">К расписанию</span>
                </a>
            </li>
        </ul>
        @if (Request.IsAuthenticated)
        {
            using (Html.BeginForm("LogOff", "Account", FormMethod.Post, new { id = "logoutForm", @class = "navbar-right" }))
            {
                @Html.AntiForgeryToken()

                <ul class="nav navbar-nav navbar-right">
                    <li class="dropdown">
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                            <i class="fa fa-calendar fa-32px"></i><br>
                            <span class="nav-icon-text"></span>2015/2016 Учебный год<span class="caret"></span>
                        </a>
                        <ul class="dropdown-menu">
                            <li><a href="#">2016/2017</a></li>
                        </ul>
                    </li>

                    <li class="navbar-divider"></li>

                    <li class="dropdown">
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                            <i class="fa fa-user fa-32px"></i><br>
                            <span class="nav-icon-text"></span>Профиль [@(ViewBag.UserName)] <span class="caret"></span>
                        </a>
                        <ul class="dropdown-menu">
                            <li><a href="@Url.Action("Index", "AcademicPlan")"><span class="fa fa-upload"></span> Загрузка учебных планов</a></li>
                            <li role="separator" class="divider"></li>
                            <li><a href="javascript:document.getElementById('logoutForm').submit()"><span class="fa fa-power-off"></span> Выйти</a></li>
                        </ul>
                    </li>
                </ul>
            }
        }
    </div>
</div>

<div class="schedule-container">
    <div class="week-panel text-center"></div>

    <div class="container">
        <h2>Выбор групп для редактирования расписания</h2>
        @*<hr/>*@

        <div class="row inline-block-lg">
            <div class="col-md-4">
                <div class="title">Редактировались ранее</div>
                <br />
                <div class="subtitle"></div>
            </div>
            <div class="col-md-8">
                <div class="form-group col-md-12">
                    <select class="form-control" title="" data-size="12" data-bind="selectPicker: ViewData().GroupSetId, options: ViewData().GroupSets, optionsValue: 'GroupSetId',
                        optionsText: 'GroupSetName', optionsCaption: 'Новый список групп...', event : { change: groupSetChanged }, optionsAfterRender: $root.groupSetOptionContent"></select>
                </div>
            </div>
        </div>

        <div class="row inline-block mrgtop24">
            <div class="col-md-4">
                <div class="title">
                    Наименование
                    <br />
                    <div class="subtitle">Выбранные группы будут отображаться в пункте "Редактировались ранее" под данным наименованием. Если оставить поле пустым, наименование будет выдано автоматически.</div>
                </div>
            </div>
            <div class="col-md-8">
                <div class="form-group col-md-9">
                    <input class="form-control" type="text" data-bind="value: ViewData().GroupSetName" />
                </div>
            </div>
        </div>

        <div class="row inline-block mrgtop24">
            <div class="col-md-4">
                <div class="title">Факультет</div>
            </div>
            <div class="col-md-8">
                <div class="form-group col-md-9">
                    <select class="form-control" title="" data-size="12" data-bind="selectPicker: ViewData().FacultyId, options: ViewData().Faculties, optionsValue: 'FacultyId', optionsText: 'FacultyName', optionsCaption: '', event : { change: facultyChanged }"></select>
                </div>
            </div>
        </div>

        <div class="row inline-block">
            <div class="col-md-4">
                <div class="title">Форма обучения</div>
            </div>
            <div class="col-md-8">
                <div class="form-group col-md-6">
                    <select class="form-control" title="" data-size="12" data-bind="selectPicker: ViewData().EducationFormId, options: ViewData().EducationForms, optionsValue: 'EducationFormId', optionsText: 'EducationFormName', optionsCaption: '', event : { change: educationFormChanged }"></select>
                </div>
            </div>
        </div>

        <div class="row inline-block">
            <div class="col-md-4">
                <div class="title">Уровень образования</div>
            </div>
            <div class="col-md-8">
                <div class="form-group col-md-6">
                    <select class="form-control" title="" data-size="12" data-bind="selectPicker: ViewData().EducationLevelId, options: ViewData().EducationLevels, optionsValue: 'EducationLevelId', optionsText: 'EducationLevelName', optionsCaption: '', event : { change: educationLevelChanged }"></select>
                </div>
            </div>
        </div>

        <div class="row inline-block">
            <div class="col-md-4">
                <div class="title">Курс</div>
            </div>
            <div class="col-md-8">
                <div class="form-group col-md-3">
                    <select id="courseNumber" class="form-control" title="" data-size="12" data-bind="selectPicker: ViewData().CourseNumber, options: ViewData().CourseNumbers, optionsCaption: '', event: { change : courseNumberChanged }"></select>
                </div>
            </div>
        </div>

        <div class="row inline-block">
            <div class="col-md-4">
                <div class="title">Группы</div>
            </div>
            <div class="col-md-8">

                @*<div class="col-h2 mrgbtm24">1 поток</div>*@

                <div class="col-md-9" data-bind="visible: $root.ViewData().Groups().length < 1">
                    <div class="alert alert-info" role="alert">Выберите факультет, форму обучения, уровень образования и курс.</div>
                </div>               

                <!-- ko foreach: ViewData().Groups -->
                <div class="col-md-3">
                    @*<div>1</div>*@
                    <div class="mrgbtm24">
                        <input type="checkbox" class="checkbox-x" data-three-state="false" data-bind="checkbox: { item: $data, selectedItems: $root.ViewData().SelectedGroups }, attr: { id: 'group-' + GroupId() }">
                        <label class="cbx-label" data-bind="attr: { for: 'group-' + GroupId() }">
                            <span data-bind="text: GroupName"></span>
                            <span class="order" data-bind="text: Order"></span>
                        </label>
                    </div>
                </div>
                <!-- /ko -->
            </div>
        </div>

        <div class="row inline-block">
            <div class="col-md-4">
            </div>
            <div class="col-md-8">
                <div class="col-md-3">
                    <button class="btn btn-success btn-lg" data-bind="click: selectFlow, enable: $root.ViewData().SelectedGroups().length > 0"><i class="fa fa-check-square" aria-hidden="true"></i> Выбрать</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    @Scripts.Render("~/bundles/underscore")
    @Scripts.Render("~/bundles/bootstrap-select")
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/bundles/checkbox-x")

    <script>
        $(function() {
            viewModel.loadViewData();

            ko.applyBindings(viewModel);
        });

        var viewModel = new MainViewModel();

        function MainViewModel() {
            var self = this;

            self.ViewData = ko.observable(new SelectFlowViewModel());

            self.loadViewData = function() {
                $.post('/Home/SelectFlowData', {}, function(data) {
                    self.ViewData(new SelectFlowViewModel(data));
                });
            };

            self.loadCourseNumbers = function() {
                var parameters = {
                    facultyId: self.ViewData().FacultyId(),
                    educationFormId: self.ViewData().EducationFormId(),
                    educationLevelId: self.ViewData().EducationLevelId()
                };

                $.post('/Dictionary/CourseNumber', parameters, function(data) {
                    self.ViewData().CourseNumbers(data);
                    $('#courseNumber').selectpicker('refresh');
                });
            };

            self.loadGroups = function() {
                var parameters = {
                    facultyId: self.ViewData().FacultyId(),
                    educationFormId: self.ViewData().EducationFormId(),
                    educationLevelId: self.ViewData().EducationLevelId(),
                    courseNumber: self.ViewData().CourseNumber()
                };

                if (parameters.facultyId && parameters.educationFormId
                    && parameters.educationLevelId && parameters.courseNumber) {

                    $.post('/Dictionary/Group', parameters, function(data) {
                        var groupMapping = {
                            create: function(options) {
                                return new GroupViewModel(options.data);
                            }
                        };

                        ko.mapping.fromJS(data, groupMapping, self.ViewData().Groups);
                    });

                }
            };

            self.groupSetChanged = function () {
                var viewData = self.ViewData();
                var groupSetId = viewData.GroupSetId();
                if (!groupSetId) {

                    viewData.GroupSetName('');
                    viewData.FacultyId('');
                    viewData.EducationFormId('');
                    viewData.EducationLevelId('');
                    viewData.CourseNumber('');
                    viewData.CourseNumbers([]);
                    viewData.Groups([]);

                } else {
                    var parameters = { groupSetId: groupSetId };

                    $.post('/Home/SelectFlowData', parameters, function (data) {
                        if (data) {
                            viewData.GroupSetName(data.GroupSetName);
                            viewData.FacultyId(data.FacultyId);
                            viewData.EducationFormId(data.EducationFormId);
                            viewData.EducationLevelId(data.EducationLevelId);
                            viewData.CourseNumbers(data.CourseNumbers);
                            viewData.CourseNumber(data.CourseNumber);                            

                            $('select').selectpicker('refresh');

                            var groupMapping = {
                                create: function (options) {
                                    return new GroupViewModel(options.data);
                                }
                            };

                            ko.mapping.fromJS(data.Groups, groupMapping, viewData.Groups);
                        }
                    });
                }
            };

            self.groupSetOptionContent = function (option, item) {
                if (!item) return;

                $(option).text(item.GroupSetName());
                $(option).attr('data-subtext', "<span class='description'>" + item.GroupNames() + "</span>");
                $(option).attr('title', item.GroupSetName());

                ko.applyBindingsToNode(option, {}, item);
            };

            self.facultyChanged = function () {
                var viewData = self.ViewData();
                viewData.EducationLevelId('');
                viewData.CourseNumber('');
                viewData.Groups([]);

                self.loadCourseNumbers();
            };

            self.educationFormChanged = function() {
                self.loadCourseNumbers();
                var viewData = self.ViewData();
                viewData.CourseNumber('');
                viewData.Groups([]);
            };

            self.educationLevelChanged = function() {
                self.loadCourseNumbers();
                var viewData = self.ViewData();
                viewData.CourseNumber('');
                viewData.Groups([]);
            };

            self.courseNumberChanged = function() {
                self.loadGroups();
            };

            self.selectFlow = function() {
                var selectFlowViewModel = ko.toJS(self.ViewData());

                var postData = {
                    GroupSetId: selectFlowViewModel.GroupSetId,
                    GroupSetName: selectFlowViewModel.GroupSetName,
                    FacultyId: selectFlowViewModel.FacultyId,
                    EducationLevelId: selectFlowViewModel.EducationLevelId,
                    EducationFormId: selectFlowViewModel.EducationFormId,
                    CourseNumber: selectFlowViewModel.CourseNumber,
                    Groups: ko.toJS(selectFlowViewModel.SelectedGroups)
                };

                $.ajax({
                    type: "POST",
                    url: "/Home/SelectFlow",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ viewModel: postData }),
                    dataType: "html",
                    success: function(response) {
                        response = JSON.parse(response);
                        if (response.result == 'Redirect') {
                            window.location = response.url;
                        } else if (response.result == 'Error') {

                        }
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        alert(xhr.status);
                        alert(thrownError);
                    }
                });
            };
        }

        ko.bindingHandlers.checkbox = {
            init: function(element, valueAccessor) {
                var parameters = valueAccessor();
                var item = parameters.item;               
                var value = item.IsSelected() ? '1' : '0';
                $(element).val(value);

                $(element).change(function() {
                    item.IsSelected(!item.IsSelected());

                    var selectedItems = parameters.selectedItems();
                    var sortedItems = _.sortBy(selectedItems, function (item) {
                        var order = item.Order();
                        if (!order) {
                            return selectedItems.length;
                        }

                        return order;
                    });
                    $.each(sortedItems, function (index, item) {
                        item.Order(index + 1);
                    });

                    if (!item.IsSelected()) {
                        item.Order('');
                    }
                });

                $(element).checkboxX();
            }
        };

        function SelectFlowViewModel(data) {
            var self = this;
            if (!data) {
                self.GroupSetId = ko.observable('');
                self.GroupSets = ko.observableArray([]);
                self.GroupSetName = ko.observable('');
                self.FacultyId = ko.observable('');
                self.Faculties = ko.observableArray([]);
                self.EducationLevelId = ko.observable('');
                self.EducationLevels = ko.observableArray([]);
                self.EducationFormId = ko.observable('');
                self.EducationForms = ko.observableArray([]);
                self.CourseNumber = ko.observable('');
                self.CourseNumbers = ko.observableArray([]);
                self.Groups = ko.observableArray([]);
            }

            var selectFlowMapping = {
                'GroupSets': {
                    create: function(options) {
                        return new GroupSetViewModel(options.data);
                    }
                },
                'Groups': {
                    create: function(options) {
                        return new GroupViewModel(options.data);
                    }
                },
                'Faculties': {
                    create: function(options) {
                        return new FacultyViewModel(options.data);
                    }
                },
                'EducationForms': {
                    create: function(options) {
                        return new EducationFormViewModel(options.data);
                    }
                },
                'EducationLevels': {
                    create: function(options) {
                        return new EducationLevelViewModel(options.data);
                    }
                }
            };

            ko.mapping.fromJS(data, selectFlowMapping, self);

            self.SelectedGroups = ko.computed(function() {
                return ko.utils.arrayFilter(self.Groups(), function(value) {
                    return value.IsSelected();
                });
            });

            return self;
        }

        function GroupSetViewModel(data) {
            ko.mapping.fromJS(data, {}, this);
        }

        function GroupViewModel(data) {
            var self = this;
            if (!data) {
                self.GroupId = ko.observable('');
                self.GroupName = ko.observable('');
                //self.Order = ko.observable('');
                //self.IsSelected = ko.observable('');
            }

            self.Order = ko.observable('');
            self.IsSelected = ko.observable(false);

            ko.mapping.fromJS(data, {}, self);

            return self;
        }

        function FacultyViewModel(data) {
            ko.mapping.fromJS(data, {}, this);
        }

        function EducationFormViewModel(data) {
            ko.mapping.fromJS(data, {}, this);
        }

        function EducationLevelViewModel(data) {
            ko.mapping.fromJS(data, {}, this);
        }
    </script>
}
