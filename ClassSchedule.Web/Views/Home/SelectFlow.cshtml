@{
    ViewBag.Title = "Выбор потока";
}

@Styles.Render("~/Content/checkbox-x")
@Styles.Render("~/Content/bootstrap-select")

@Html.Partial("_NavbarLight")

<div class="schedule-container">
    <div class="week-panel text-center"></div>

    <div class="container">
        <h2>Выбор групп для редактирования расписания</h2>

        <div class="row inline-block-lg">
            <div class="col-md-4">
                <div class="title">Редактировались ранее</div>
                <br />
                <div class="subtitle"></div>
            </div>
            <div class="col-md-8">
                <div class="form-group col-md-12">
                    <select class="form-control" title="" data-size="12" data-bind="selectPicker: GroupSetId, options: GroupSets, optionsValue: 'GroupSetId',
                        optionsText: 'GroupSetName', optionsCaption: 'Новый список групп...', event : { change: GroupSetChanged }, optionsAfterRender: GroupSetOptionContent"></select>
                </div>
            </div>
        </div>

        <div class="row inline-block mrgtop24">
            <div class="col-md-4">
                <div class="title">
                    Группы
                    <br />
                    <div class="subtitle">Выберите факультет, форму обучения, уровень образования и курс для добавленя групп в список. </div>
                </div>
            </div>
            <div class="col-md-8">
                <div class="form-group col-md-12">
                    <div class="panel-content mrgbtm36">
                        <div class="row form-group">
                            <div class="col-md-4 dt-style">
                                Наименование списка
                            </div>
                            <div class="col-md-8">
                                <input class="form-control" type="text" data-bind="value: GroupSetName" />
                            </div>
                        </div>

                        <div class="row form-group">
                            <div class="col-md-4 dt-style">
                                Факультет
                            </div>
                            <div class="col-md-8">
                                <select class="form-control" title="" data-size="12" data-bind="selectPicker: FacultyId, options: Faculties, optionsValue: 'FacultyId', optionsText: 'FacultyName', optionsCaption: '', event : { change: FacultyChanged }"></select>
                            </div>  
                        </div>

                        <div class="row form-group">
                            <div class="col-md-4 dt-style">
                                Форма обучения
                            </div>
                            <div class="col-md-6">
                                <select class="form-control" title="" data-size="12" data-bind="selectPicker: EducationFormId, options: EducationForms, optionsValue: 'EducationFormId', optionsText: 'EducationFormName', optionsCaption: '', event : { change: EducationFormChanged }"></select>
                            </div>
                        </div>

                        <div class="row form-group">
                            <div class="col-md-4 dt-style">
                                Уровень образования
                            </div>
                            <div class="col-md-6">
                                <select class="form-control" title="" data-size="12" data-bind="selectPicker: EducationLevelId, options: EducationLevels, optionsValue: 'EducationLevelId', optionsText: 'EducationLevelName', optionsCaption: '', event : { change: EducationLevelChanged }"></select>
                            </div>
                        </div>

                        <div class="row form-group">
                            <div class="col-md-4 dt-style">
                                Курс
                            </div>
                            <div class="col-md-3">
                                <select id="courseNumber" class="form-control" title="" data-size="12" data-bind="selectPicker: CourseNumber, options: CourseNumbers, optionsCaption: '', event: { change : CourseNumberChanged }"></select>
                            </div>
                        </div>
                    </div>                              
                                    
                    <!-- ko foreach: Groups -->
                    <div class="col-md-3" data-bind="visible: true" style="display: none;">
                        <div class="mrgbtm24">
                            <input type="checkbox" class="checkbox-x" data-three-state="false" data-bind="checkbox: { item: $data, selectedItems: $root.SelectedGroups, orderFunction: $root.ReorderSelectedGroups }, attr: { id: 'group-' + GroupId() }">
                            <label class="cbx-label" data-bind="attr: { for: 'group-' + GroupId() }">
                                <span data-bind="text: GroupName"></span>
                                <span class="order" data-bind="text: Order"></span>
                            </label>
                        </div>
                    </div>
                    <!-- /ko -->
                </div>
            </div>
        </div>

        <!-- ko if: Groups().length > 0 -->
        <div class="row inline-block-lg" data-bind="visible: true" style="display: none;">
            <div class="col-md-4">
                <div class="title">Выбранные группы</div>
                <br />
                <div class="subtitle"></div>
            </div>
            <div class="col-md-8">
                <div class="form-group col-md-12" data-bind="foreach: SelectedGroups">
                    <label class="cbx-label">
                        <span data-bind="text: GroupName"></span>
                        <span class="order" data-bind="text: Order"></span>
                        <a href="#" data-bind="click: $root.RemoveSelectedGroup"><span class="glyphicon glyphicon-remove text-danger" aria-hidden="true"></span></a>
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    </label>
                </div>
            </div>
        </div>
        <!-- /ko -->

        <div class="row inline-block mrgbtm36">
            <div class="col-md-4">
            </div>
            <div class="col-md-8">
                <div class="col-md-3">
                    <button class="btn btn-green btn-lg" data-bind="click: SelectFlow, enable: SelectedGroups().length > 0"><i class="fa fa-check-square" aria-hidden="true"></i> Выбрать</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="~/Scripts/schedule/viewmodels.js"></script>
    @Scripts.Render("~/bundles/underscore")
    @Scripts.Render("~/bundles/bootstrap-select")
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/bundles/checkbox-x")

    <script>
        var viewModel = new MainViewModel();
        $(function () {
            viewModel.LoadViewData();

            ko.applyBindings(viewModel);
        });

        function MainViewModel() {
            var self = this;

            self.GroupSetId = ko.observable('');
            self.GroupSets = ko.observableArray([]);
            self.GroupSetName = ko.observable('');
            self.FacultyId = ko.observable('');
            self.Faculties = ko.observableArray([]);
            self.EducationLevelId = ko.observable('');
            self.EducationLevels = ko.observableArray([]);
            self.EducationFormId = ko.observable('');
            self.EducationForms = ko.observableArray([]);
            self.CourseNumber = ko.observable('');
            self.CourseNumbers = ko.observableArray([]);
            self.Groups = ko.observableArray([]);
            self.SelectedGroups = ko.observableArray([]);          

            self.LoadViewData = function () {
                $.post('/Home/SelectFlowData', {}, function (data) {
                    ko.mapping.fromJS(data.GroupSets, {
                        create: function (options) {
                            return new GroupSetViewModel(options.data);
                        }
                    }, self.GroupSets);

                    ko.mapping.fromJS(data.Groups, {
                        create: function (options) {
                            return new GroupViewModel(options.data);
                        }
                    }, self.Groups);

                    ko.mapping.fromJS(data.Faculties, {
                        create: function (options) {
                            return new FacultyViewModel(options.data);
                        }
                    }, self.Faculties);

                    ko.mapping.fromJS(data.EducationForms, {
                        create: function (options) {
                            return new EducationFormViewModel(options.data);
                        }
                    }, self.EducationForms);

                    ko.mapping.fromJS(data.EducationLevels, {
                        create: function (options) {
                            return new EducationLevelViewModel(options.data);
                        }
                    }, self.EducationLevels);

                    $('select').selectpicker('refresh');
                });
            };

            self.LoadCourseNumbers = function () {
                if (!self.FacultyId()) return;

                var parameters = {
                    facultyId: self.FacultyId(),
                    educationFormId: self.EducationFormId(),
                    educationLevelId: self.EducationLevelId()
                };

                $.post('/Dictionary/CourseNumber', parameters, function (data) {
                    self.CourseNumbers(data);
                    $('#courseNumber').selectpicker('refresh');
                });
            };

            self.LoadGroups = function () {
                var parameters = {
                    facultyId: self.FacultyId(),
                    educationFormId: self.EducationFormId(),
                    educationLevelId: self.EducationLevelId(),
                    courseNumber: self.CourseNumber()
                };

                if (parameters.facultyId && parameters.educationFormId
                    && parameters.educationLevelId && parameters.courseNumber) {

                    $.post('/Dictionary/Group', parameters, function (data) {
                        var groupMapping = {
                            create: function (options) {
                                return new GroupViewModel(options.data);
                            }
                        };

                        ko.mapping.fromJS(data, groupMapping, self.Groups);

                        ko.utils.arrayForEach(self.SelectedGroups(), function (selectedGroup) {
                            ko.utils.arrayForEach(self.Groups(), function (group) {
                                if (selectedGroup.GroupId() == group.GroupId()) {
                                    var selector = '#group-' + group.GroupId();
                                    $(selector).trigger('change');
                                }
                            });
                        });
                    });
                }
            };

            self.GroupSetChanged = function () {
                self.SelectedGroups([]);

                var groupSetId = self.GroupSetId();
                if (!groupSetId) {

                    self.GroupSetName('');
                    self.FacultyId('');
                    self.EducationFormId('');
                    self.EducationLevelId('');
                    self.CourseNumber('');
                    self.CourseNumbers([]);
                    self.Groups([]);

                } else {
                    var parameters = { groupSetId: groupSetId };

                    $.post('/Home/SelectFlowData', parameters, function (data) {
                        if (data) {
                            self.GroupSetName(data.GroupSetName);
                            self.FacultyId(data.FacultyId);
                            self.EducationFormId(data.EducationFormId);
                            self.EducationLevelId(data.EducationLevelId);
                            self.CourseNumbers(data.CourseNumbers);
                            self.CourseNumber(data.CourseNumber);

                            $('select').selectpicker('refresh');

                            var groupMapping = {
                                create: function (options) {
                                    return new GroupViewModel(options.data);
                                }
                            };

                            ko.mapping.fromJS(data.Groups, groupMapping, self.Groups);
                            ko.mapping.fromJS(data.SelectedGroups, groupMapping, self.SelectedGroups);
                        }
                    });
                }
            };

            self.GroupSetOptionContent = function (option, item) {
                if (!item) return;

                $(option).text(item.GroupSetName());
                $(option).attr('data-subtext', "<span class='description'>" + item.GroupNames() + "</span>");
                $(option).attr('title', item.GroupSetName());

                ko.applyBindingsToNode(option, {}, item);
            };

            self.FacultyChanged = function () {
                self.CourseNumber('');
                self.LoadCourseNumbers();
            };

            self.EducationFormChanged = function () {
                self.LoadCourseNumbers();
                self.CourseNumber('');
            };

            self.EducationLevelChanged = function () {
                self.LoadCourseNumbers();
                self.CourseNumber('');
            };

            self.CourseNumberChanged = function () {
                self.LoadGroups();
            };

            self.SelectFlow = function () {
                var selectFlowViewModel = ko.toJS(self);

                var postData = {
                    GroupSetId: selectFlowViewModel.GroupSetId,
                    GroupSetName: selectFlowViewModel.GroupSetName,
                    FacultyId: selectFlowViewModel.FacultyId,
                    EducationLevelId: selectFlowViewModel.EducationLevelId,
                    EducationFormId: selectFlowViewModel.EducationFormId,
                    CourseNumber: selectFlowViewModel.CourseNumber,
                    Groups: ko.toJS(selectFlowViewModel.SelectedGroups)
                };

                $.ajax({
                    type: "POST",
                    url: "/Home/SelectFlow",
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ viewModel: postData }),
                    dataType: "html",
                    success: function (response) {
                        response = JSON.parse(response);
                        if (response.result == 'Redirect') {
                            window.location = response.url;
                        } else if (response.result == 'Error') {

                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert(xhr.status + ' ' + thrownError);
                    }
                });
            };

            self.ReorderSelectedGroups = function () {
                var sortedGroups = _.sortBy(self.SelectedGroups(), function (group) {
                    var order = group.Order();
                    if (!order) {
                        return self.SelectedGroups().length;
                    }

                    return order;
                });

                $.each(sortedGroups, function (index, group) {
                    group.Order(index + 1);
                });

                ko.utils.arrayForEach(self.Groups(), function (group) {
                    if (!group.IsSelected()) {
                        group.Order('');
                    }
                });
            };

            self.RemoveSelectedGroup = function (group) {
                var selector = '#group-' + group.GroupId();
                self.SelectedGroups.remove(group);
                self.ReorderSelectedGroups();
                $(selector).trigger('change');
            };
        }

        ko.bindingHandlers.checkbox = {
            init: function (element, valueAccessor) {
                var parameters = valueAccessor();
                var item = parameters.item;
                var value = item.IsSelected() ? '1' : '0';
                $(element).val(value);

                $(element).change(function () {
                    item.IsSelected(!item.IsSelected());

                    if (item.IsSelected()) {
                        var match = ko.utils.arrayFirst(parameters.selectedItems(), function (selectedItem) {
                            return selectedItem.GroupId() === item.GroupId();
                        });

                        if (!match) {
                            parameters.selectedItems.push(item);
                        }
                    } else {
                        parameters.selectedItems.remove(item);
                    }

                    if (parameters.orderFunction) {
                        parameters.orderFunction();
                    }
                });

                $(element).checkboxX();
            }
        };
    </script>
}
